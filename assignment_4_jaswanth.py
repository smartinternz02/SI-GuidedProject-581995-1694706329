# -*- coding: utf-8 -*-
"""Assignment_4_Jaswanth.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/171O80TTvK3O4sfQbZjBKQrLJpGceLeCb
"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
import seaborn as sns
import numpy as np

"""## Loading The Data"""

df = pd.read_csv('/content/winequality-red.csv')

df.head()

"""## Checking The NULL Values"""

df.isnull().any()

df.isnull().sum()

df.info()

df.describe()

df.shape

"""## Data Visualisation And Replacing The Outlayers"""

sns.boxplot(df['fixed acidity'])

sns.distplot(df['fixed acidity'])

df['fixed acidity'].median()

q1 = df['fixed acidity'].quantile(0.25)
q3 = df['fixed acidity'].quantile(0.75)
IQR = q3-q1
upper_limit = q3+ 1.5*IQR
df['fixed acidity'] = np.where(df['fixed acidity']>upper_limit,7.9,df['fixed acidity'])

sns.boxplot(df['fixed acidity'])

sns.boxplot(df['volatile acidity'])

sns.distplot(df['volatile acidity'])

df['volatile acidity'].median()

q1 = df['volatile acidity'].quantile(0.25)
q3 = df['volatile acidity'].quantile(0.75)
IQR = q3-q1
upper_limit = q3+ 1.5*IQR
df['volatile acidity'] = np.where(df['volatile acidity']>upper_limit,0.52,df['volatile acidity'])

sns.boxplot(df['volatile acidity'])

sns.boxplot(df['citric acid'])

sns.distplot(df['citric acid'])

df['citric acid'].median()

q1 = df['citric acid'].quantile(0.25)
q3 = df['citric acid'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
df['citric acid'] = np.where(df['citric acid']>upper_limit,0.26,df['citric acid'])

sns.boxplot(df['citric acid'])

sns.boxplot(df['residual sugar'])

sns.distplot(df['residual sugar'])

df['residual sugar'].median()

q1 = df['residual sugar'].quantile(0.25)
q3 = df['residual sugar'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
lower_limit = q1 - 1.5*IQR
df['residual sugar'] = np.where(df['residual sugar']>upper_limit,2.2,df['residual sugar'])
df['residual sugar'] = np.where(df['residual sugar']<lower_limit,2.2,df['residual sugar'])

sns.boxplot(df['residual sugar'])

sns.boxplot(df['chlorides'])

sns.distplot(df['chlorides'])

df['chlorides'].median()

q1 = df['chlorides'].quantile(0.25)
q3 = df['chlorides'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
lower_limit = q1 - 1.5*IQR
df['chlorides'] = np.where(df['chlorides']>upper_limit,0.079,df['chlorides'])
df['chlorides'] = np.where(df['chlorides']<lower_limit,0.079,df['chlorides'])

sns.boxplot(df['chlorides'])

sns.boxplot(df['free sulfur dioxide'])

sns.distplot(df['free sulfur dioxide'])

df['free sulfur dioxide'].median()

q1 = df['free sulfur dioxide'].quantile(0.25)
q3 = df['free sulfur dioxide'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
df['free sulfur dioxide'] = np.where(df['free sulfur dioxide']>upper_limit,14.0,df['free sulfur dioxide'])

sns.boxplot(df['free sulfur dioxide'])

sns.boxplot(df['total sulfur dioxide'])

sns.distplot(df['total sulfur dioxide'])

df['total sulfur dioxide'].median()

q1 = df['total sulfur dioxide'].quantile(0.25)
q3 = df['total sulfur dioxide'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
df['total sulfur dioxide'] = np.where(df['total sulfur dioxide']>upper_limit,38.0,df['total sulfur dioxide'])

sns.boxplot(df['total sulfur dioxide'])

sns.boxplot(df['density'])

sns.distplot(df['density'])

df['density'].median()

q1 = df['density'].quantile(0.25)
q3 = df['density'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
lower_limit = q1 - 1.5*IQR
df['density'] = np.where(df['density']>upper_limit,0.99675,df['density'])
df['density'] = np.where(df['density']<lower_limit,0.99675,df['density'])

sns.boxplot(df['density'])

sns.boxplot(df['pH'])

sns.distplot(df['pH'])

df['pH'].median()

q1 = df['pH'].quantile(0.25)
q3 = df['pH'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
lower_limit = q1 - 1.5*IQR
df['pH'] = np.where(df['pH']>upper_limit,3.31,df['pH'])
df['pH'] = np.where(df['pH']<lower_limit,3.31,df['pH'])

sns.boxplot(df['pH'])

sns.boxplot(df['sulphates'])

sns.distplot(df['sulphates'])

df['sulphates'].median()

q1 = df['sulphates'].quantile(0.25)
q3 = df['sulphates'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
df['sulphates'] = np.where(df['sulphates']>upper_limit,0.62,df['sulphates'])

sns.boxplot(df['sulphates'])

sns.boxplot(df['alcohol'])

sns.distplot(df['alcohol'])

df['alcohol'].median()

q1 = df['alcohol'].quantile(0.25)
q3 = df['alcohol'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
df['alcohol'] = np.where(df['alcohol']>upper_limit,10.2,df['alcohol'])

sns.boxplot(df['alcohol'])

sns.boxplot(df['quality'])

sns.distplot(df['quality'])

df['quality'].median()

q1 = df['quality'].quantile(0.25)
q3 = df['quality'].quantile(0.75)
IQR = q3-q1
upper_limit = q3 + 1.5*IQR
lower_limit = q1 - 1.5*IQR
df['quality'] = np.where(df['quality']>upper_limit,6.0,df['quality'])
df['quality'] = np.where(df['quality']<lower_limit,6.0,df['quality'])

sns.boxplot(df['quality'])

sns.pairplot(df)

sns.heatmap(df.corr(),annot=True)

"""## Splitting Data into Independent And Dependent Datas"""

y = df.quality
X = df.drop(columns=['quality'],axis=1)

y.head()

X.head()

"""## Splitting The Data Into Training And Testing"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)

X_train.shape

X_test.shape

"""## Data Modelling"""

from sklearn.linear_model import LinearRegression,LogisticRegression
lr = LinearRegression()
lor = LogisticRegression()

lr.fit(X_train,y_train)

lor.fit(X_train,y_train)

y_pred1 = np.round(lr.predict(X_test))

y_pred2 = np.round(lor.predict(X_test))

y_pred1

y_pred2

"""## Evaluation"""

from sklearn import metrics
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
as1 = accuracy_score(y_test,y_pred1)

as2 = accuracy_score(y_test,y_pred2)

r2s1 = metrics.r2_score(y_test,y_pred1)

r2s2 = metrics.r2_score(y_test,y_pred2)

as1

as2

r2s1

r2s2

pd.crosstab(y_test,y_pred1)

pd.crosstab(y_test,y_pred2)

classification_report(y_test,y_pred1)

classification_report(y_test,y_pred2)

"""## Random Input"""

ran1 = np.round(lr.predict([[8.0,0.50,0.04,2.5,0.075,13.0,50.0,0.9975,3.50,0.50,9.6]]))

ran2 = np.round(lr.predict([[7.5,0.80,0.00,2.0,0.055,13.0,60.0,0.9985,3.40,0.68,9.7]]))

ran1

ran2